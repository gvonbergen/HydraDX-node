// This file is part of HydraDX.

// Copyright (C) 2020-2021  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for exchange
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-03-18, STEPS: [5, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/hydra-dx
// benchmark
// --chain=dev
// --steps=5
// --repeat=20
// --pallet=exchange
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=weights.rs
// --template=.maintain/pallet-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for exchange.
pub trait WeightInfo {
	fn known_overhead_for_on_finalize() -> Weight;
	fn sell_intention() -> Weight;
	fn buy_intention() -> Weight;
	fn on_finalize(t: u32) -> Weight;
	fn on_finalize_buys_no_matches(t: u32) -> Weight;
	fn on_finalize_sells_no_matches(t: u32) -> Weight;
	fn sell_extrinsic() -> Weight;
	fn on_finalize_for_one_sell_extrinsic() -> Weight;
	fn buy_extrinsic() -> Weight;
	fn on_finalize_for_one_buy_extrinsic() -> Weight;
}

/// Weights for exchange using the hydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for HydraWeight<T> {
	fn known_overhead_for_on_finalize() -> Weight {
		(11_782_000 as Weight).saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn sell_intention() -> Weight {
		(109_767_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn buy_intention() -> Weight {
		(112_747_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn on_finalize(t: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 100_000
			.saturating_add((110_967_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn on_finalize_buys_no_matches(t: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 79_000
			.saturating_add((125_236_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn on_finalize_sells_no_matches(t: u32) -> Weight {
		(8_528_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((109_453_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn sell_extrinsic() -> Weight {
		(121_370_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn on_finalize_for_one_sell_extrinsic() -> Weight {
		(163_828_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn buy_extrinsic() -> Weight {
		(120_942_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn on_finalize_for_one_buy_extrinsic() -> Weight {
		(179_585_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn known_overhead_for_on_finalize() -> Weight {
		(11_782_000 as Weight).saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn sell_intention() -> Weight {
		(109_767_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn buy_intention() -> Weight {
		(112_747_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn on_finalize(t: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 100_000
			.saturating_add((110_967_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn on_finalize_buys_no_matches(t: u32) -> Weight {
		(0 as Weight)
			// Standard Error: 79_000
			.saturating_add((125_236_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn on_finalize_sells_no_matches(t: u32) -> Weight {
		(8_528_000 as Weight)
			// Standard Error: 84_000
			.saturating_add((109_453_000 as Weight).saturating_mul(t as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((2 as Weight).saturating_mul(t as Weight)))
	}
	fn sell_extrinsic() -> Weight {
		(121_370_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn on_finalize_for_one_sell_extrinsic() -> Weight {
		(163_828_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn buy_extrinsic() -> Weight {
		(120_942_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn on_finalize_for_one_buy_extrinsic() -> Weight {
		(179_585_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
}
